# Librerías
library(readxl)
library(readr)

library(stringr)
library(dplyr)
library(tidyr)
library(DT)

library(ggplot2)
library(treemapify)
library(leaflet)

library(shiny)
library(shinyWidgets)
library(shinydashboard)
library(shinycssloaders)

library(estilotu)
set_estilotu()


################### Shiny Dashboard App ####################
# Bases
path1 <- file.path('~', 'datos_repositorio', 'internacionalizacion')
path2 <- file.path('~', 'datos_repositorio', 'acuerdos')

import_princ_2017 <- file.path(path1, 'import_princ_2017.rds') %>% read_rds
export_uru_2017 <- file.path(path1, 'export_uru_2017.rds') %>% read_rds
export_princ_2017 <- file.path(path1, 'export_princ_2017.rds') %>% read_rds

# # Mapa
# download.file("http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip" , destfile="world_shape_file.zip")
# system("unzip world_shape_file.zip")
library(rgdal)
world_spdf=readOGR( dsn= getwd() , layer="TM_WORLD_BORDERS_SIMPL-0.3")
# countries <- world_spdf@data %>% select(-AREA, -POP2005, -REGION, -SUBREGION)
# country <- world_spdf@data

paises <- file.path(path1, 'paises.xlsx') %>% read_excel %>% 
  mutate(FINAL = toupper(final))
country <- file.path(path1, 'country.rds') %>% read_rds %>% 
  filter(is.na(M49) != TRUE)
WTO <- file.path(path2, 'acuerdos_completo.rds') %>% read_rds %>% 
     # file.path(path2, 'acuerdos.rds') %>% read_rds %>% 
  mutate(pais = case_when(pais == "Chinese Taipei" ~ "China", TRUE ~ pais),
         members = case_when(members == "CHINASE TAIPEI" ~ "CHINA", TRUE ~ members)) %>% 
  rename(PAIS = pais) %>%
  left_join(country,# %>% transmute(M49, ISO3, ingles, final), 
            by = c("members" = "NAME"))
paises <- file.path(path1, 'paises.xlsx') %>% read_excel %>% 
  mutate(final = final %>% toupper)

aranceles_uruguay <- file.path(path1, 'aranceles_uruguay.rds') %>% read_rds
aranceles_competidores <- file.path(path1, 'aranceles_competidores.rds') %>% read_rds
aranceles_4 <- file.path(path1, 'aranceles_4.rds') %>% read_rds
aranceles_6 <- file.path(path1, 'aranceles_6.rds') %>% read_rds
aranceles_uru_4 <- file.path(path1, 'aranceles_uru_4.rds') %>% read_rds
aranceles_uru_6 <- file.path(path1, 'aranceles_uru_6.rds') %>% read_rds


ncm <- file.path(path1, "ncm.rds") %>% read_rds %>% mutate(codigo = as.character(codigo)) %>% 
  mutate(codigo = case_when(nchar(codigo)==3 ~ paste("0", codigo, sep = ""), TRUE ~ codigo))

source('~/repositorio_info_2/codigueras/ncm_completa.R')
ncm.tu <- asigna.grupo(codiguera_ncm_wide())
grupo.ncm.tu <- sort(unique(ncm.tu$clasif.tu))

# codiguera_productos <- productos.tu()
# ncm <- codiguera_ncm()

## Inputs
GRUPO = sort(unique(export_princ_2017$GRUPO))
PAIS = sort(unique(export_uru_2017$DESTINO))
DESTINO = sort(unique(import_princ_2017$PAIS))
PAIS.ACUERDOS <- WTO %>% transmute(members) %>% arrange(members) %>% unique %>% 
  filter(!members %in% c("EASTERN AND SOUTHERN AFRICA STATES INTERIM EPA",
                         "EC ENLARGEMENT (INDETERMINADO)",
                         "EC (INDETERMINADO) ENLARGEMENT",
                         "EC TREATY",
                         "EU (INDETERMINADO) ENLARGEMENT",
                         "EUROPEAN UNION"))


## Función para lectura de mapa 
choropleth_world <- function(df) {
  mapa <- world_spdf
  mapa@data <- mapa@data %>% 
    rename(pais = NAME) %>% 
    left_join(country %>% transmute(pais, NAME), by = "pais") %>% 
    left_join(df) %>% 
    mutate(country_label = if_else(is.na(country_label) == TRUE, "No-socios",
                                   as.character(country_label))) %>%
    ungroup %>% 
    transmute(FIPS, ISO2, ISO3, UN, NAME, AREA, POP2005, REGION, SUBREGION, LON, LAT, country_label) %>% 
    unique
  
  pal <- colorFactor(palette = c("#2974B4", "#F7941E",  "#BACB33"),                               # previewColors(pal, c("País", "Socios", "No-socios"))
                     levels = c("País", "Socios", "No-socios"))
  leaflet(mapa,
          options = leafletOptions(minZoom = 1.5)) %>%
    addTiles() %>% 
    addPolygons(stroke = TRUE, 
                # smoothFactor = 0.2, 
                fillOpacity = 0.8,
                weight = 1,
                fillColor = ~pal(country_label),
                label = ~NAME,
                layerId = ~NAME,
                color =  "#BACB33") %>% 
    # label = labels) #%>%
    addLegend("topright", pal = pal, values = ~country_label,
              title = "Programas",
              opacity = 1)
}

## User Interface - UI

dbheader <- dashboardHeader(
  title = "Análisis comercio internacional",
  titleWidth = 450,
  tags$li(a(href = 'https://www.transformauruguay.gub.uy',
            img(src = "https://www.transformauruguay.gub.uy/media/images/logo_sntpc.svg?timestamp=20170908142947",
                height="30px"),
            style = "padding-top:10px; padding-bottom:10px;"),
          class = "dropdown"))

sidebar <- dashboardSidebar(
  tags$head(tags$link(rel = "stylesheet", type = "text/css", href = "estilo.css")),
  disable = FALSE,
  sidebarMenu(menuItem('Exportaciones Uruguay', icon = icon('th'), startExpanded = TRUE,
                       menuSubItem('Principales productos', tabName = 'expor_uru', icon = icon('bar-chart')),
                       menuSubItem('Por producto/Por destino', tabName = 'expor_prod_dest', icon = icon('bar-chart'))),
              menuItem('Importaciones', tabName = 'import_destinos', icon = icon('list')),
              menuItem('Competidores', tabName = 'competidores', icon = icon('list')),
              menuItem('Acuerdos comerciales', tabName = 'acuerdos', icon = icon('info')),
              menuItem('Comparacion aranceles', tabName = 'comparacion', icon = icon('info')),
              menuItem('Acerca de', tabName = 'AcercaDe', icon = icon('search'),
                       menuSubItem('Codiguera NCM', tabName = 'codiguera_ncm', icon = icon("arrow-right")),
                       menuSubItem('Codiguera TU', tabName = 'codiguera_tu', icon = icon("arrow-right")))
              ))

body <- dashboardBody(
  estilo_tu,
  tabItems(
    tabItem(tabName = 'expor_uru',
            fluidRow(tabBox(title = 'Exportaciones de Uruguay en 2017', 
                            width = 12, 
                            tabPanel(title = 'Principales productos',
                                     fluidRow(column(6, dataTableOutput('tabla_princ_prod')),
                                              column(6, br(), br(),plotOutput('plot_princ_prod')))
                                     )))),
    tabItem(tabName = 'expor_prod_dest',
            fluidRow(tabBox(width = 12,
                            tabPanel(title = 'Por producto', 
                                     solidHeader = TRUE,
                                     selectInput('producto1', 'Seleccione grupo de producto:', choices = GRUPO, selected = 'Carne bovina'),
                                     br(),
                                     fluidRow(column(6, dataTableOutput('tabla_producto1')),
                                              column(6, br(), plotOutput("plot_producto1")))),
                            tabPanel(title = 'Por destino',
                                     solidHeader = TRUE,
                                     selectInput('destino1', 'Seleccione país importador:', choices = PAIS, selected = 'CHINA'),
                                     br(),
                                     fluidRow(column(6, dataTableOutput('tabla_destino1')),
                                              column(6, br(), plotOutput('plot_destino1'))))
                            ))),
    tabItem(tabName = "import_destinos",
              fluidRow(tabBox(title = "Origen de las Importaciones",
                              width = 12,
                              tabPanel(title = "Por producto",
                                       selectInput('producto2', 'Seleccione grupo de producto:', choices = GRUPO, selected = 'Carne bovina'),
                                       uiOutput('origen1'),
                                       fluidPage(column(6, 
                                                        withSpinner(
                                                          dataTableOutput("tabla_origen2"),
                                                          type = 4, color = "#F7941E", size = 0.4)),
                                                 column(6, br(), br(), 
                                                        withSpinner(
                                                          plotOutput("plot_origen1"),
                                                          type = 4, color = "#F7941E", size = 0.4)))
                                )))),
    tabItem(tabName = "competidores",
                    fluidRow(tabBox(title = "Destino de las Exportaciones de los competidores",
                                    width = 12,
                                    tabPanel(title = "Por producto",
                                             selectInput('producto.3', 'Seleccione grupo de producto:', choices = GRUPO, selected = 'Carne bovina'),
                                             uiOutput('destino.1'),
                                             fluidPage(column(6, 
                                                              withSpinner(
                                                                dataTableOutput("tabla_destino2"),
                                                                type = 4, color = "#F7941E", size = 0.4)),
                                                       column(6, br(), br(), 
                                                              withSpinner(
                                                                plotOutput("plot_destino2"),
                                                                type = 4, color = "#F7941E", size = 0.4)))
                                    )))),
    tabItem(tabName = "acuerdos",
            fluidRow(tabBox(title = "Alianzas comerciales",
                            width = 12,
                            tabPanel(title = "Socios",
                                     fluidPage(column(6, 
                                                      selectInput('acuerdos.1', 'Seleccione país:', choices = PAIS.ACUERDOS, selected = 'AUSTRALIA'))),
                                     fluidPage(column(2),
                                               column(9,
                                                      withSpinner(
                                                        leafletOutput("map", height="600px", width = "1000px"),
                                                        absolutePanel(top = 10, right = 10, fixed = TRUE,
                                                                      tags$div(style = "opacity: 0.50; background: #2974B4; padding: 5px; ",
                                                                               helpText("Alianzas comerciales"), textOutput("text"))),
                                                        type = 4, color = "#F7941E", size = 0.4),
                                                      br(), br(), br(), br())),
                                     ########### 
                                     fluidPage(column(7),
                                               column(5, uiOutput('acuerdos.2'), br())),
                                     ########### 
                                     
                                     fluidPage(column(6, dataTableOutput("tabla_acuerdos1")),
                                               column(1),
                                               column(5, dataTableOutput("tabla_acuerdos2")))
                                     )))),
    tabItem(tabName = 'comparacion',
            fluidRow(tabBox(title = 'Comparacion de aranceles de Uruguay y sus competidores', 
                            width = 12, 
                            tabPanel(title = 'Resumen',
                                     selectInput('producto.40', 'Seleccione grupo de producto:',
                                                 choices = c('Carne bovina', 'Celulosa', 'Soja'), 
                                                 selected = 'Carne bovina'),
                                     uiOutput('competidores_resumen.1'),
                                     fluidPage(column(6, withSpinner(dataTableOutput("tabla_aranceles_uru"),
                                                                     type = 4, color = "#F7941E", size = 0.4)),
                                               column(6, withSpinner(dataTableOutput("tabla_aranceles_comp"),
                                                                     type = 4, color = "#F7941E", size = 0.4)))),
                            tabPanel(title = '4 dígitos HS',
                                     selectInput('producto.41', 'Seleccione grupo de producto:',
                                                 choices = c('Carne bovina', 'Celulosa', 'Soja', 'Arroz'), 
                                                 selected = 'Carne bovina'),
                                     uiOutput('competidores.1'),
                                     fluidPage(column(6, withSpinner(dataTableOutput("tabla_aranceles_uru4"),
                                                                     type = 4, color = "#F7941E", size = 0.4)),
                                               column(6, withSpinner(dataTableOutput("tabla_aranceles_comp4"),
                                                                     type = 4, color = "#F7941E", size = 0.4)))),
                            tabPanel(title = '6 dígitos HS',
                                     selectInput('producto.42', 'Seleccione grupo de producto:',
                                                 choices = c('Carne bovina', 'Celulosa', 'Soja', 'Arroz'), 
                                                 selected = 'Carne bovina'),
                                     uiOutput('competidores.2'),
                                     fluidPage(column(6, withSpinner(dataTableOutput("tabla_aranceles_uru6"),
                                                                     type = 4, color = "#F7941E", size = 0.4)),
                                               column(6, withSpinner(dataTableOutput("tabla_aranceles_comp6"),
                                                                     type = 4, color = "#F7941E", size = 0.4))))
            ))),
    
    tabItem(tabName = "codiguera_ncm",
            fluidRow(box(title = "Descripción NCM",
                         status = "primary",
                         dataTableOutput("tablaNCM"),
                         width = 12, collapsible = TRUE)
                     )),
    
    tabItem(tabName = "codiguera_tu",
            fluidRow(box(title = "Clasificación Grupos TU",
                         status = "primary",
                         pickerInput('grupo.tu', 'Seleccione grupo de producto:',
                                     choices = grupo.ncm.tu, selected = grupo.ncm.tu[1:length(grupo.ncm.tu)],
                                     options = list(`actions-box` = TRUE,
                                                    `deselect-all-text` = "Ningún grupo",
                                                    `select-all-text` = "Todos los productos",
                                                    `none-selected-text` = "Seleccione al menos un grupo.",
                                                    `selected-text-format` = "count > 5"),
                                     
                                     multiple = TRUE),
                         selectInput('apertura.tu', 'Seleccione apertura:', 
                                     choices = c("Sección", "Capítulo", "NCM_4", "NCM_6"),
                                     selected = "NCM_6"),
                         dataTableOutput("tablaTU"),
                         width = 12, collapsible = TRUE)
                     ))
  
    ))


ui <- dashboardPage(dbheader, sidebar, body,
                     skin = "black")

# Server
server <- function(input, output) {
  
  dataset_princ_prod <- export_uru_2017 %>% 
    filter(GRUPO != "Otros") %>% 
    group_by(GRUPO) %>% 
    summarise(MONTO_musd = trunc(sum(MONTO_musd))) %>%
    arrange(-MONTO_musd) %>% 
    head(10)

  output$tabla_princ_prod <- renderDataTable({
    datatable(
      dataset_princ_prod %>% 
        mutate(MONTO_musd = format(MONTO_musd, big.mark = ".")),
      options = list(
        paging = FALSE,
        searching = FALSE,
        columnDefs = list(list(
          className = 'dt-right',                                    # Alinea a la derecha
          targets = 2))))                                            # la columna 2
    })
  
  
  output$plot_princ_prod <- renderPlot({
      p1 <- ggplot(dataset_princ_prod,
                   aes(x = reorder(GRUPO, MONTO_musd),
                       y = MONTO_musd,
                       fill = GRUPO)) +
        geom_bar(stat="identity", show.legend = FALSE) +
        coord_flip()+
        labs(y = "Monto de exportaciones en musd", x = "Principales productos") 
      print(p1)
    })

  
  dataset_producto1 <- reactive({
    export_uru_2017 %>% 
      filter(GRUPO == input$producto1) %>% 
      group_by(DESTINO) %>% 
      summarise(MONTO_musd = trunc(sum(MONTO_musd))) %>%
      arrange(-MONTO_musd) 
  })
  
  output$tabla_producto1 <- renderDataTable({
    datatable(
      dataset_producto1() %>% 
        mutate(MONTO_musd = format(MONTO_musd, big.mark = ".", digits = NULL)),
      filter = "top",
      options = list(
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-right', 
          targets = 2))))
  })
  
  output$plot_producto1 <- renderPlot({
    p2 <- 
    ggplot(dataset_producto1() %>% head(10), 
           aes(area = MONTO_musd,
               fill = DESTINO,
               label = str_c(DESTINO, ", \n",                        # agrega "\n" para separar en dos renglones
                             format(MONTO_musd, big.mark = ".", 
                                    digits = NULL), 
                             sep ="")
               )) + 
      geom_treemap() +
      geom_treemap_text(colour = "white", 
                        place = "centre", 
                        grow = TRUE) +
      labs(fill = "Destinos",
           title = "Principales 10 destinos de exportación") 
      # theme(legend.direction = "vertical",
      #       legend.position = "bottom",
      #       legend.box = "vertical",
      #       panel.border=element_blank(),
      #       axis.line = element_line(),
      #       legend.background = element_rect(colour='grey'))
    print(p2)
  })

  dataset_destino1 <- reactive({
    export_uru_2017 %>% 
      filter(DESTINO == input$destino1) %>% 
      group_by(GRUPO) %>% 
      summarise(MONTO_musd = trunc(sum(MONTO_musd))) %>% 
      arrange(-MONTO_musd) 
  })
    
  output$tabla_destino1 <- renderDataTable({
    datatable(
      dataset_destino1() %>%
        mutate(MONTO_musd = format(MONTO_musd, big.mark = ".", digits = NULL)) ,
      filter = "top",
      options = list(
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-right', 
          targets = 2))))
  })
  
  output$plot_destino1 <- renderPlot({
    p3 <- 
      ggplot(dataset_destino1() %>% head(10), 
             aes(area = MONTO_musd,
                 fill = GRUPO,
                 label = str_c(str_wrap(GRUPO, 20), ", \n", 
                               format(MONTO_musd, decimal.mark = ",", 
                                      big.mark = ".",
                                      digits = NULL), 
                               sep =""))) + 
      geom_treemap() +
      geom_treemap_text(colour = "white", 
                        place = "centre", 
                        grow = TRUE) +
      labs(fill = "Productos")
    print(p3)
  })
  
  output$origen1 <- renderUI ({
    origen2 <- import_princ_2017 %>%  
      filter(GRUPO == input$producto2) %>% 
      pull(var = PAIS) %>% 
      unique()
    selectInput('origen3', 'Seleccione país importador:', choices = origen2, selected = origen2[1])
  })
  
  dataset_origen1 <- reactive({
    import_princ_2017 %>% 
      filter(GRUPO == input$producto2,
             PAIS == input$origen3) %>% 
      ungroup() %>% 
      group_by(ORIGEN) %>% 
      summarise(MONTO_musd = trunc(sum(MONTO_musd)),
                PARTICIPACIÓN = round(sum(PERCENT),4)) %>% 
      arrange(-MONTO_musd)
  })
 
  output$tabla_origen2 <- renderDataTable({
    datatable(
      dataset_origen1() %>%
        mutate(MONTO_musd = format(MONTO_musd, big.mark = ".", digits = NULL)),
      filter = "top",
      options = list(
        paging = TRUE,
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-right', 
          targets = 2))
        ))
  })
  
  output$plot_origen1 <- renderPlot({
    p3 <- 
      ggplot(dataset_origen1() %>% head(10), 
             aes(area = MONTO_musd,
                 fill = ORIGEN,
                 label = str_c(ORIGEN, ", \n", PARTICIPACIÓN*100, "%", sep =""))) + 
      geom_treemap() +
      geom_treemap_text(colour = "white", 
                        place = "centre", 
                        grow = TRUE) +
      labs(fill = "Origen")
    print(p3)
  })
  
  ##
  output$destino.1 <- renderUI ({
    destino.2 <- export_princ_2017 %>%  
      filter(GRUPO == input$producto.3) %>% 
      pull(var = PAIS) %>%
      unique()
    selectInput('destino.3', 'Seleccione país exportador:', choices = destino.2, selected = destino.2[1])
  })
  
  dataset_destino2 <- reactive({
    export_princ_2017 %>% 
      filter(GRUPO == input$producto.3,
             PAIS == input$destino.3) %>% 
      ungroup() %>% 
      group_by(DESTINO) %>% 
      summarise(MONTO_musd = trunc(sum(MONTO_musd)),
                PARTICIPACIÓN = round(sum(PERCENT),4)) %>% 
      arrange(-MONTO_musd)
  })

  output$tabla_destino2 <- renderDataTable({
    datatable(
      dataset_destino2() %>% 
        mutate(MONTO_musd = format(MONTO_musd, big.mark = ".", digits = NULL)),
      filter = "top",
      options = list(
        paging = TRUE,
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-right', 
          targets = 2))))
  })
  
  output$plot_destino2 <- renderPlot({
    p4 <- 
      ggplot(dataset_destino2() %>% head(10), 
             aes(area = MONTO_musd,
                 fill = DESTINO,
                 label = str_c(DESTINO, ", \n", PARTICIPACIÓN*100,"%", sep =""))) + 
      geom_treemap() +
      geom_treemap_text(colour = "white", 
                        place = "centre", 
                        grow = TRUE) +
      labs(fill = "Destino")
    print(p4)
  })  
  
  ##  
  dataset_acuerdos1 <- reactive({
    WTO %>% 
      filter(members == input$acuerdos.1) %>% 
      transmute(Agreement, year, Type) %>% 
      arrange(Agreement) %>% 
      unique
  })
  
  output$tabla_acuerdos1 <- renderDataTable({
    datatable(
      dataset_acuerdos1() %>% 
        rename(Acuerdo = Agreement,
               Año = year,
               `Tipo de acuerdo` = Type),
      rownames = FALSE,
      filter = "top",
      options = list(
        paging = TRUE,
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-center',
          targets = 1:2))
        ))
  })
  
  
  ########### Opción 1: con selector de acuerdo
  output$acuerdos.2 <- renderUI ({
    acuerdos.3 <-
      WTO %>%
      filter(members == input$acuerdos.1) %>%
      pull(var = Agreement) %>%
      unique()
    pickerInput('acuerdos.4', 'Seleccione acuerdo:',
                choices = acuerdos.3,
                options = list(`actions-box` = TRUE),
                selected = acuerdos.3[],
                multiple = TRUE)
  })

  dataset_acuerdos2 <- reactive({
    WTO %>%
      filter(Agreement %in% input$acuerdos.4) %>%
      transmute(Agreement, members) %>%
      filter(members != input$acuerdos.1) %>%
      arrange(members) %>%
      unique
  })

  output$tabla_acuerdos2 <- renderDataTable({
    datatable(
      dataset_acuerdos2() %>%
        rename(Acuerdos = Agreement,
               `Países miembros` = members) %>%
        arrange(Acuerdos),
      rownames = FALSE,
      filter = "top",
      options = list(
        paging = TRUE,
        searching = TRUE,
        columnDefs = list(list(
          className = 'dt-center',
          targets = 1))))
  })
  ########### 
  
  ########### Opción 2: sin selector de acuerdo
  # dataset_acuerdos2 <- reactive({
  #   WTO %>%  
  #     filter(members == input$acuerdos.1) %>%
  #     transmute(Agreement) %>%
  #     unique() %>% 
  #     left_join(WTO, by = "Agreement") %>% 
  #     transmute(Agreement, members) %>% 
  #     filter(members != input$acuerdos.1) %>% 
  #     arrange(members) %>% 
  #     unique()
  # })
  # 
  # output$tabla_acuerdos2 <- renderDataTable({
  #   datatable(
  #     dataset_acuerdos2() %>% 
  #       rename(Acuerdos = Agreement,
  #              `Países miembros` = members) %>% 
  #       arrange(Acuerdos),
  #     rownames = FALSE,
  #     filter = "top",
  #     options = list(
  #       paging = TRUE,
  #       searching = TRUE,
  #       columnDefs = list(list(
  #         className = 'dt-center',
  #         targets = 1))))
  # })
  ###########   
  
  
  dataset_map_pais <- reactive({
    WTO %>% 
      filter(members == as.character(input$acuerdos.1)) %>% 
      mutate(country_label = "País") %>% 
      mutate(country_label = as.factor(country_label)) %>%
      select(-Agreement, -Date, -year, -Type, -provisions, -AC, -LE, -class) %>%
      unique
  })
  
  dataset_map_socio <- reactive({
    WTO %>% 
      left_join(dataset_acuerdos2() %>% 
                  mutate(country_label = "Socios"),
                by = c("members", "Agreement")) %>%
      mutate(country_label = as.factor(country_label)) %>%
      select(-Agreement, -Date, -year, -Type, -provisions, -AC, -LE, -class) %>%
      filter(is.na(country_label) != TRUE) %>% 
      unique
  })
  
  dataset_map <- reactive({
    dataset_map_pais() %>% 
      rbind(dataset_map_socio())
  })
  
  output$map <- renderLeaflet({
    choropleth_world(dataset_map())
  })
  
  ##
  output$competidores_resumen.1 <- renderUI ({
    competidores.2 <- aranceles_uruguay %>%
      filter(GRUPO == input$producto.40) %>% 
      pull(var = DESTINO) %>% 
      unique() 
    selectInput('competidores.3', 'Seleccione país de destino:', choices = competidores.2, selected = competidores.2[1])
  })
  
  dataset_aranceles_uru <- reactive ({
    aranceles_uruguay %>% 
      filter(GRUPO == input$producto.40,
             DESTINO == input$competidores.3) %>% 
      select('NCM', 'ORIGEN', 'DESTINO', 'ARANCEL(%)', 'DETALLE') 
  })
  
  dataset_aranceles_comp <- reactive ({
    aranceles_competidores %>% 
      filter(GRUPO == input$producto.40,
             DESTINO == input$competidores.3) %>% 
      select('NCM', 'ORIGEN', 'DESTINO', 'ARANCEL(%)', 'DETALLE') 
  })
  
  output$tabla_aranceles_uru <- renderDataTable({
    datatable(
      dataset_aranceles_uru(),
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  output$tabla_aranceles_comp <- renderDataTable({
    datatable(
      dataset_aranceles_comp(),
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  #A 4 dígitos HS
  output$competidores.1 <- renderUI ({
    competidores.2 <- aranceles_uru_4 %>%
      filter(GRUPO == input$producto.41) %>% 
      pull(var = DESTINO) %>% 
      unique() 
    selectInput('competidores.3', 'Seleccione país de destino:', 
                choices = competidores.2, selected = 'CHINA')
  })
  
  dataset_aranceles_uru4 <- reactive ({
    aranceles_uru_4 %>% 
      filter(GRUPO == input$producto.41,
             DESTINO == input$competidores.3) %>% 
      select('HS_4', 'PAIS', 'DESTINO', 'ARANCEL') 
  })
  
  dataset_aranceles_comp4 <- reactive ({
    aranceles_4 %>% 
      filter(GRUPO == input$producto.41,
             PAIS == input$competidores.3) %>% 
      select('HS_4', 'PAIS', 'PAIS_EXPORTADOR', 'ARANCEL') 
  })
  
  output$tabla_aranceles_uru4 <- renderDataTable({
    datatable(
      dataset_aranceles_uru4(),
      filter = "top",
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  output$tabla_aranceles_comp4 <- renderDataTable({
    datatable(
      dataset_aranceles_comp4(),
      filter = "top",
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  #A 6 dígitos HS
  output$competidores.2 <- renderUI ({
    competidores.22 <- aranceles_uru_6 %>%
      filter(GRUPO == input$producto.42) %>% 
      pull(var = DESTINO) %>% 
      unique() 
    selectInput('competidores.32', 'Seleccione país de destino:', 
                choices = competidores.22, 
                selected = 'CHINA')
  })
  
  dataset_aranceles_uru6 <- reactive ({
    aranceles_uru_6 %>% 
      filter(GRUPO == input$producto.42,
             DESTINO == input$competidores.32) %>% 
      select('HS_6', 'PAIS', 'DESTINO', 'ARANCEL') 
  })
  
  dataset_aranceles_comp6 <- reactive ({
    aranceles_6 %>% 
      filter(GRUPO == input$producto.42,
             PAIS == input$competidores.32) %>% 
      select('HS_6', 'PAIS', 'PAIS_EXPORTADOR', 'ARANCEL') 
  })
  
  output$tabla_aranceles_uru6 <- renderDataTable({
    datatable(
      dataset_aranceles_uru6(),
      filter = "top",
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  output$tabla_aranceles_comp6 <- renderDataTable({
    datatable(
      dataset_aranceles_comp6(),
      filter = "top",
      options = list(paging = TRUE,
                     searching = TRUE))
  })
  
  output$tablaNCM <- renderDataTable({
    datatable(
      ncm,
      filter = "top")
  })
  
  dataset_tablaTU <- reactive ({
    a <- ncm.tu %>% 
      filter(clasif.tu %in% input$grupo.tu) %>% 
      transmute(Grupo = clasif.tu,
                `Seccion` = seccion, 
                `Descripción Seccion` = desc.secc,
                `Capitulo` = capitulo, 
                `Descripción Capitulo` = desc.cap,
                `NCM_4` = ncm_4, 
                `Descripción NCM_4` = desc.ncm_4,
                `NCM_6` = ncm_6, 
                `Descripción NCM_6` = desc.ncm_6) %>% 
      apertura_tu(input$apertura.tu)
  })
  
  output$tablaTU <- renderDataTable({
    datatable(
      dataset_tablaTU() %>% 
        unique,
      filter = "top",
      rownames = FALSE)
  })
  
  
}

# Run app
shinyApp(ui, server)

